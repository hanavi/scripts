#!/usr/bin/env python3

#############################################################################
# File name: hashgenerator
# Author: James Casey
# Date created: 2015-11-27
# Date last modified: 2015-11-27
# Description: A short hash generator based on time and a seed password
# Notes: Requires int.to_bytes() from Python 3.(something-or-other)
#############################################################################

__author__ = "James Casey"
__copyright__ = "Copyright 2015"
__credits__ = ["James Casey"]
__license__ = "GPL"
__version__ = "0.1"
__maintainer__ = "James Casey"
__email__ = "hanavi@gmail.com"
__status__ = "Production"


import datetime
import base64
import hashlib
import sys
import getpass


def get_count():
    """ Get the number of days between now and the final date.  This is used
    to determine the number of times we hash

    The hash will change every day at midnight!
    """

    # This date was chosen arbitrarily
    start = datetime.datetime(2776,1,1)
    now = datetime.datetime.utcnow()
    delta = start.date() - now.date()

    return delta.days

def get_hash(password, hash_length=12):
    """ Return a shortened SHA512 hash using our seed information """

    # Get the number of iterations based on the date
    iterations = get_count()

    # Build the initial seed
    seed = b''.join([int(ord(c)).to_bytes(1,'big') for c in password])

    for i in range(iterations):
        seed = hashlib.sha512(seed).digest()

    # Convert to hash to base64
    bytehash = base64.b64encode(seed)[:hash_length]

    return bytehash.decode()


if __name__ == "__main__":

    password = getpass.getpass("Password: ")
    print(get_hash(password))

