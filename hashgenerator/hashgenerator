#!/usr/bin/env python3

#############################################################################
#
# File name: hashgenerator
# Author: James Casey
# Date created: 2015-11-27
# Date last modified: 2015-12-17
#
# Description: A short hash generator based on time and a seed password.
#   Recently added hash verification! Store two passwords in a GPG encrypted
#   and pass the file on the command line.  A hash will be generated for both
#   passwords that updates every minute.  Switch the order of the password
#   and supply to a friend (securly) where they can re-encrypt with their
#   own PGP key and voila!  You can use the keys to verify identity...
#   WARNING: DOES NOT PREVENT MITM ATTACKS!  Should be used in conjunction
#   with secure encrypted communications where MITM is preventable but
#   where you may need a little extra personal verification!
#
# Notes: Requires int.to_bytes() from Python 3.(something-or-other) and
#   python3-gnupg (from pip or apt-get or some other source..?) along with
#   a personal PGP key.
#
#############################################################################

__author__ = "James Casey"
__copyright__ = "Copyright 2015"
__credits__ = ["James Casey"]
__license__ = "GPL"
__version__ = "0.3"
__maintainer__ = "James Casey"
__email__ = "hanavi@gmail.com"
__status__ = "Production"


import datetime
import base64
import hashlib
import sys
import getpass
import argparse
import random

class PasswordDecryptionError(Exception):
    def __init__(self, message, errors):
        super().__init__(message)
        self.errors = errors

def get_random_seed(count=20):
    seed = ""
    for i in range(count):
        c = random.randint(0,52)
        if c < 26:
            seed += chr(c+65)
        else:
            seed += chr(c-26+97)
    return seed


def get_count(timestep=None):
    """ Get the the amount of time between now and the final date.  This is
    used to determine the number of times we hash.

    The hash will change every day at midnight (UTC) or every minute depending
    on the arguments passed.
    """

    ## The default behaviour for generating a daily hash
    if timestep is None:
        # This date was chosen arbitrarily
        start = datetime.datetime(2776,1,1)
        now = datetime.datetime.utcnow()
        delta = start.date() - now.date()
        return delta.days

    ## This generates faster hashes. New hash every minute
    elif timestep == 'min':

        # This date was chosen to deal with the larger hash generation times
        # This could easliy be updated every 5 years or automatically every
        # year ? meh..
        start = datetime.datetime(2020,1,1)
        now = datetime.datetime.utcnow()
        delta = start - now
        n = delta.days*24*60 + int(delta.seconds/60)
        return n

    else:
        raise ValueError("Invalid Timestep")

def get_hash(password, hash_length=12, iterations=None, use_safe=False):
    """ Return a shortened SHA512 hash using our seed information """

    # Get the number of iterations based on the date
    if iterations is None:
        iterations = get_count()

    # Build the initial seed
    seed = b''.join([int(ord(c)).to_bytes(1,'big') for c in password])

    for i in range(iterations):
        seed = hashlib.sha512(seed).digest()

    # Convert to hash to base64
    if use_safe:
        bytehash = base64.urlsafe_b64encode(seed)[:hash_length]
    else:
        bytehash = base64.b64encode(seed)[:hash_length]

    return bytehash.decode()

def load_passwords(fname):
    """ Load the passwords from a file encrypted for a local GPG private key
    """

    # I think this is frowned upon by some standard somewhere, but by placing
    # the gnupg import here, we allow the short hash generator to run even if
    # we don't have python3-gnupg on a particular system (I am looking at you
    # Tails).
    import gnupg

    fd = open(fname,"rb")

    gpg = gnupg.GPG()
    data = gpg.decrypt_file(fd)

    if data.status != "decryption ok":
        raise(PasswordDecryptionError("Failed to decrypt passwords",
                                      data.status))

    data = data.data.decode()

    passwords = data.split("\n")
    my_password = passwords[0]
    remote_password = passwords[1]

    return (my_password,remote_password)

def verify(fname):
    """ Print out two hashes for identity verification.

    The hash should update securely every minute.

    The local hash can be distributed to the remote party.  They then verify
    against their remote hash.  They send us their local hash, and we verify
    against our remote hash.  If everything lines up, then you *should* be
    talking to the right person... though MITM attacks are still a posibility.
    This sould be used in congjuction with a encrypted communication scheme
    where encryption fingerprints can be verified.

    Keys must be distributed through a secure chanel ahead of time (e.g. PGP).
    This will actually work with multiple sets of keys as you are passing the
    keyfile as input to the script!  You can have a different key for every
    person you talk to!

    """

    # How much of the SHA512 hash do we want to see?  The more the better, but
    # longer hashes take longer to verify... Future version to automate this?
    hash_length = 32

    pw_local, pw_remote = load_passwords(fname)
    iterations = get_count('min')

    hash_local = get_hash(pw_local,hash_length=hash_length,
                          iterations=iterations)
    hash_remote = get_hash(pw_remote,hash_length=hash_length,
                           iterations=iterations)

    # Clean up the hashes for print out
    clean_local = ""
    for i in range(0, hash_length ):
        if i % 4 == 0:
            clean_local += " "
        clean_local += hash_local[i]

    clean_remote = ""
    for i in range(0, hash_length ):
        if i % 4 == 0:
            clean_remote += " "
        clean_remote += hash_remote[i]


    # Output for verification
    print("\nThe local hash (Send this):\n\n    {}\n".format(clean_local))
    print("The remote hash (Verify with this):\n\n    {}\n".format(clean_remote))


if __name__ == "__main__":

    # Deal with script arguments
    parser = argparse.ArgumentParser()
    parser.add_argument("-V", "--verify", help=("Print time generated hashes "
            "from passwords stored in FILENAME"), dest='filename')
    parser.add_argument("-s","--safe",help="Print url-safe hash",
            action="store_true")
    parser.add_argument("-r","--random",help="Print random hash",
            action="store_true")
    args = parser.parse_args()

    if args.filename is not None:
        verify(args.filename)
        sys.exit()

    if args.random:
        password = get_random_seed()
        if args.safe:
            print(get_hash(password, hash_length=20, use_safe=True))
        else:
            print(get_hash(password, hash_length=20))
        sys.exit()

    # Safe only matters right now for the shor hash generator
    if args.safe:
        password = getpass.getpass("Password: ")
        print(get_hash(password, use_safe=True))
    else:
        password = getpass.getpass("Password: ")
        print(get_hash(password))


